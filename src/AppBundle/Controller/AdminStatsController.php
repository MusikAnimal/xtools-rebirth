<?php

/**
 * This file contains the code that powers the AdminStats page of XTools.
 *
 * @version 1.5.1
 */

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Xtools\AdminStats;
use Xtools\AdminStatsRepository;
use Xtools\ProjectRepository;

/**
 * Class AdminStatsController
 *
 * @category AdminStats
 * @package  AppBundle\Controller
 * @author   XTools Team <xtools@lists.wikimedia.org>
 * @license  GPL 3.0
 */
class AdminStatsController extends XtoolsController
{
    /**
     * Get the tool's shortname.
     * @return string
     * @codeCoverageIgnore
     */
    public function getToolShortname()
    {
        return 'adminstats';
    }

    /**
     * Method for rendering the AdminStats Main Form.
     * This method redirects if valid parameters are found, making it a
     * valid form endpoint as well.
     *
     * @param Request $request Generated by Symfony
     *
     * @Route("/adminstats",           name="adminstats")
     * @Route("/adminstats/",          name="AdminStatsSlash")
     * @Route("/adminstats/index.php", name="AdminStatsIndexPhp")
     *
     * @return Route|\Symfony\Component\HttpFoundation\Response
     */
    public function indexAction(Request $request)
    {
        $params = $this->parseQueryParams($request);

        // Redirect if we have a project. $results may also include start and/or end date.
        if (isset($params['project'])) {
            return $this->redirectToRoute('AdminStatsResult', $params);
        }

        // Otherwise render form.
        return $this->render('adminStats/index.html.twig', [
            'xtPage' => 'adminstats',
            'xtPageTitle' => 'tool-adminstats',
            'xtSubtitle' => 'tool-adminstats-desc',
        ]);
    }

    /**
     * Method for rendering the AdminStats Results
     *
     * @param Request $request The HTTP request.
     * @param string $project Project to run the results against
     * @param string $start   Date to start on.  Must parse by strtotime.
     * @param string $end     Date to end on.  Must parse by strtotime.
     *
     * @Route(
     *   "/adminstats/{project}/{start}/{end}", name="AdminStatsResult",
     *   requirements={"start" = "|\d{4}-\d{2}-\d{2}", "end" = "|\d{4}-\d{2}-\d{2}"}
     * )
     *
     * @return Route|\Symfony\Component\HttpFoundation\Response
     * @todo Move SQL to a model.
     * @codeCoverageIgnore
     */
    public function resultAction(Request $request, $project, $start = null, $end = null)
    {
        // Load the database information for the tool.
        // $projectData will be a redirect if the project is invalid.
        $projectData = $this->validateProject($project);
        if ($projectData instanceof RedirectResponse) {
            return $projectData;
        }

        list($start, $end) = $this->getUTCFromDateParams($start, $end);

        $adminStats = new AdminStats($projectData, $start, $end);
        $adminStatsRepo = new AdminStatsRepository();
        $adminStatsRepo->setContainer($this->container);
        $adminStats->setRepository($adminStatsRepo);

        $adminStats->prepareStats();

        // Render the result!
        return $this->render('adminStats/result.html.twig', [
            'xtPage' => 'adminstats',
            'xtTitle' => $project,
            'project' => $projectData,
            'as' => $adminStats,
        ]);
    }

    /************************ API endpoints ************************/

    /**
     * Display or fetch the month counts for the user.
     * @Route("/api/adminstats/admins_and_groups/{project}", name="AdminStatsApiAdminsAndGroups")
     * @param Request $request
     * @return Response
     * @codeCoverageIgnore
     */
    public function adminsAndGroupsAction(Request $request)
    {
        $ret = $this->setUpEditCounter($request, $key);
        if ($ret instanceof RedirectResponse) {
            return $ret;
        }

        return new JsonResponse(
            $this->editCounter->monthCounts(),
            Response::HTTP_OK
        );
    }
}
